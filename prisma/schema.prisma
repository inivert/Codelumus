generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid()) @db.VarChar(191)
  userId            String   @db.VarChar(191)
  type              String   @db.VarChar(191)
  provider          String   @db.VarChar(191)
  providerAccountId String   @db.VarChar(191)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?  @db.VarChar(191)
  scope             String?  @db.VarChar(191)
  id_token          String?
  session_state     String?  @db.VarChar(191)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique @map("session_token") @db.VarChar(191)
  userId       String   @map("user_id") @db.VarChar(191)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String           @id @default(cuid()) @db.VarChar(191)
  name                   String?          @db.VarChar(191)
  email                  String?          @unique @db.VarChar(191)
  emailVerified          DateTime?        @map("email_verified")
  image                  String?          @db.VarChar(191)
  role                   UserRole         @default(USER)
  website                String?          @unique @map("website") @db.VarChar(191)
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @default(now()) @map("updated_at")
  stripeCustomerId       String?          @unique @map("stripe_customer_id") @db.VarChar(191)
  stripeSubscriptionId   String?          @unique @map("stripe_subscription_id") @db.VarChar(191)
  stripePriceId          String?          @map("stripe_price_id") @db.VarChar(191)
  stripeCurrentPeriodEnd DateTime?        @map("stripe_current_period_end")
  accounts               Account[]
  adminUpdates           AdminUpdate[]
  sentInvitations        Invitation[]     @relation("inviter")
  sessions               Session[]
  supportMessages        SupportMessage[]

  @@map("users")
}

model VerificationToken {
  identifier String   @db.VarChar(191)
  token      String   @unique @db.VarChar(191)
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SupportMessage {
  id        String   @id @default(cuid()) @db.VarChar(191)
  subject   String   @db.VarChar(191)
  website   String   @db.VarChar(191)
  message   String
  userId    String   @map("user_id") @db.VarChar(191)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("support_messages")
}

model Invitation {
  id        String           @id @default(cuid()) @db.VarChar(191)
  email     String           @db.VarChar(191)
  inviterId String           @db.VarChar(191)
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  invitedBy User             @relation("inviter", fields: [inviterId], references: [id])

  @@index([inviterId])
  @@map("invitations")
}

model AdminUpdate {
  id        String   @id @default(cuid()) @db.VarChar(191)
  title     String   @db.VarChar(191)
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @db.VarChar(191)
  createdBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("admin_updates")
}

enum UserRole {
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
